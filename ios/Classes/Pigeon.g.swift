// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct QRScanResult {
  var content: String? = nil
  var format: String? = nil
  var timestamp: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> QRScanResult? {
    let content: String? = nilOrValue(pigeonVar_list[0])
    let format: String? = nilOrValue(pigeonVar_list[1])
    let timestamp: String? = nilOrValue(pigeonVar_list[2])

    return QRScanResult(
      content: content,
      format: format,
      timestamp: timestamp
    )
  }
  func toList() -> [Any?] {
    return [
      content,
      format,
      timestamp,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraTextureResult {
  var textureId: Int64? = nil
  var width: Double? = nil
  var height: Double? = nil
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraTextureResult? {
    let textureId: Int64? = nilOrValue(pigeonVar_list[0])
    let width: Double? = nilOrValue(pigeonVar_list[1])
    let height: Double? = nilOrValue(pigeonVar_list[2])
    let error: String? = nilOrValue(pigeonVar_list[3])

    return CameraTextureResult(
      textureId: textureId,
      width: width,
      height: height,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      width,
      height,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BiometricAuthResult {
  var success: Bool? = nil
  var errorCode: String? = nil
  var errorMessage: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BiometricAuthResult? {
    let success: Bool? = nilOrValue(pigeonVar_list[0])
    let errorCode: String? = nilOrValue(pigeonVar_list[1])
    let errorMessage: String? = nilOrValue(pigeonVar_list[2])

    return BiometricAuthResult(
      success: success,
      errorCode: errorCode,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      success,
      errorCode,
      errorMessage,
    ]
  }
}

private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return QRScanResult.fromList(self.readValue() as! [Any?])
    case 130:
      return CameraTextureResult.fromList(self.readValue() as! [Any?])
    case 131:
      return BiometricAuthResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? QRScanResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? CameraTextureResult {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? BiometricAuthResult {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol QRScannerApi {
  func startScanner() throws
  func stopScanner() throws
  func getCameraTexture(completion: @escaping (Result<CameraTextureResult, Error>) -> Void)
  func disposeCameraTexture() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class QRScannerApiSetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `QRScannerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: QRScannerApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startScannerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.startScanner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScannerChannel.setMessageHandler { _, reply in
        do {
          try api.startScanner()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startScannerChannel.setMessageHandler(nil)
    }
    let stopScannerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.stopScanner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScannerChannel.setMessageHandler { _, reply in
        do {
          try api.stopScanner()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopScannerChannel.setMessageHandler(nil)
    }
    let getCameraTextureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.getCameraTexture\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraTextureChannel.setMessageHandler { _, reply in
        api.getCameraTexture { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCameraTextureChannel.setMessageHandler(nil)
    }
    let disposeCameraTextureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.disposeCameraTexture\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeCameraTextureChannel.setMessageHandler { _, reply in
        do {
          try api.disposeCameraTexture()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeCameraTextureChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BiometricAuthApi {
  func authenticateWithBiometrics(completion: @escaping (Result<BiometricAuthResult, Error>) -> Void)
  func isBiometricAvailable(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BiometricAuthApiSetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `BiometricAuthApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BiometricAuthApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let authenticateWithBiometricsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.BiometricAuthApi.authenticateWithBiometrics\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithBiometricsChannel.setMessageHandler { _, reply in
        api.authenticateWithBiometrics { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithBiometricsChannel.setMessageHandler(nil)
    }
    let isBiometricAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com_example_seek_challenge.BiometricAuthApi.isBiometricAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isBiometricAvailableChannel.setMessageHandler { _, reply in
        api.isBiometricAvailable { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isBiometricAvailableChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol QRScannerFlutterApiProtocol {
  func onQRCodeDetected(result resultArg: QRScanResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class QRScannerFlutterApi: QRScannerFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonPigeonCodec {
    return PigeonPigeonCodec.shared
  }
  func onQRCodeDetected(result resultArg: QRScanResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com_example_seek_challenge.QRScannerFlutterApi.onQRCodeDetected\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}

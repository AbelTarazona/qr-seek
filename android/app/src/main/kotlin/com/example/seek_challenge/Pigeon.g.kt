// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.seek_challenge

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class QRScanResult (
  val content: String? = null,
  val format: String? = null,
  val timestamp: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): QRScanResult {
      val content = pigeonVar_list[0] as String?
      val format = pigeonVar_list[1] as String?
      val timestamp = pigeonVar_list[2] as String?
      return QRScanResult(content, format, timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      content,
      format,
      timestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraTextureResult (
  val textureId: Long? = null,
  val width: Double? = null,
  val height: Double? = null,
  val error: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CameraTextureResult {
      val textureId = pigeonVar_list[0] as Long?
      val width = pigeonVar_list[1] as Double?
      val height = pigeonVar_list[2] as Double?
      val error = pigeonVar_list[3] as String?
      return CameraTextureResult(textureId, width, height, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      textureId,
      width,
      height,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BiometricAuthResult (
  val success: Boolean? = null,
  val errorCode: String? = null,
  val errorMessage: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): BiometricAuthResult {
      val success = pigeonVar_list[0] as Boolean?
      val errorCode = pigeonVar_list[1] as String?
      val errorMessage = pigeonVar_list[2] as String?
      return BiometricAuthResult(success, errorCode, errorMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      success,
      errorCode,
      errorMessage,
    )
  }
}
private open class PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          QRScanResult.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraTextureResult.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BiometricAuthResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is QRScanResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is CameraTextureResult -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is BiometricAuthResult -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface QRScannerApi {
  fun startScanner()
  fun stopScanner()
  fun getCameraTexture(callback: (Result<CameraTextureResult>) -> Unit)
  fun disposeCameraTexture()

  companion object {
    /** The codec used by QRScannerApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `QRScannerApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: QRScannerApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.startScanner$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.startScanner()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.stopScanner$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopScanner()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.getCameraTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getCameraTexture{ result: Result<CameraTextureResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.QRScannerApi.disposeCameraTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.disposeCameraTexture()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BiometricAuthApi {
  fun authenticateWithBiometrics(callback: (Result<BiometricAuthResult>) -> Unit)
  fun isBiometricAvailable(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by BiometricAuthApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `BiometricAuthApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: BiometricAuthApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.BiometricAuthApi.authenticateWithBiometrics$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.authenticateWithBiometrics{ result: Result<BiometricAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com_example_seek_challenge.BiometricAuthApi.isBiometricAvailable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.isBiometricAvailable{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class QRScannerFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by QRScannerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
  }
  fun onQRCodeDetected(resultArg: QRScanResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com_example_seek_challenge.QRScannerFlutterApi.onQRCodeDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
